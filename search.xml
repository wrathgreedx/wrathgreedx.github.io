<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度优先遍历三色标记法</title>
      <link href="/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95/"/>
      <url>/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>对于一个起始节点，如果从该节点出发，无论每一步选择沿哪条有向边行走，最后必然在有限步内到达终点，则将该起始节点称作是安全的。</p><p>返回一个由图中所有安全的起始节点组成的数组作为答案。答案数组中的元素应当按 升序 排列。</p><p>该有向图有 n 个节点，按 0 到 n - 1 编号，其中 n 是 graph 的节点数。图以下述形式给出：graph[i] 是编号 j 节点的一个列表，满足 (i, j) 是图的一条有向边。</p><p>链接：<a href="https://leetcode-cn.com/problems/find-eventual-safe-states">https://leetcode-cn.com/problems/find-eventual-safe-states</a></p><p><img src="https://raw.githubusercontent.com/wrathgreedx/pics/master/image-20210806102645272.png" alt="image-20210806102645272"></p><h1 id="解"><a href="#解" class="headerlink" title="解"></a>解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">eventualSafeNodes</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//增加标记</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0:未访问过;</span></span><br><span class="line"><span class="comment">        1:访问完毕且安全;</span></span><br><span class="line"><span class="comment">        -1:位于环中或正在访问;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sign</span><span class="params">(graph.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">//图不一定是连通的，因此需要在每次遍历后查找没有被遍历到的点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">find</span>(sign.<span class="built_in">begin</span>(), sign.<span class="built_in">end</span>(), <span class="number">0</span>)!= sign.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="built_in">find</span>(sign.<span class="built_in">begin</span>(), sign.<span class="built_in">end</span>(), <span class="number">0</span>) - sign.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="built_in">DFS</span>(graph, i, sign);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sign.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sign[i] == <span class="number">1</span>)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用了三色标记法的DFS</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, <span class="keyword">int</span> i, vector&lt;<span class="keyword">int</span>&gt;&amp; sign)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sign[i] != <span class="number">0</span>) <span class="comment">//已被访问过直接返回标记</span></span><br><span class="line">            <span class="keyword">return</span> sign[i];</span><br><span class="line">        <span class="keyword">if</span>(graph[i].<span class="built_in">empty</span>())&#123;<span class="comment">//访问到叶节点</span></span><br><span class="line">            sign[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sign[i] = <span class="number">-1</span>;<span class="comment">//标记为正在访问</span></span><br><span class="line">        <span class="keyword">bool</span> flag_ifincircle = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;graph[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="built_in">DFS</span>(graph, graph[i][j], sign);</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="number">-1</span>)</span><br><span class="line">                flag_ifincircle = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag_ifincircle)</span><br><span class="line">            sign[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> sign[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>三色标记法：用0，1，-1表示节点的状态</p><p>重点是DFS中的<code> sign[i] = -1;//标记为正在访问</code>，这样在遍历到环时将整个环上以及能到达这个环的节点都标记为了-1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vector</title>
      <link href="/vector/"/>
      <url>/vector/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>(<span class="keyword">int</span> size, <span class="keyword">int</span> t)</span><br><span class="line"><span class="comment">//int size(可选):设置大小</span></span><br><span class="line"><span class="comment">//int t(可选):设置所有元素初始值</span></span><br><span class="line"><span class="comment">//size 与 t都没有时生成空的向量</span></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;type&gt;&gt; <span class="built_in">v</span>(a, vector&lt;type&gt;(b, c))</span><br><span class="line"><span class="comment">//二维向量的初始化    </span></span><br><span class="line"><span class="comment">//a:行数</span></span><br><span class="line"><span class="comment">//b:初值</span></span><br><span class="line"><span class="comment">//c:列数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>(vector)</span><br><span class="line"><span class="comment">//复制构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>(begin,end)</span><br><span class="line"><span class="comment">//复制[begin,end)区间内另一个数组的元素到vector中</span></span><br></pre></td></tr></table></figure><h1 id="增"><a href="#增" class="headerlink" title="增"></a>增</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(type x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在尾部加入一个元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator it, <span class="keyword">int</span> n, type x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//向迭代器指向的元素前增加元素</span></span></span><br><span class="line"><span class="function"><span class="comment">//int n(可选):设置重复增加个数</span></span></span><br><span class="line"><span class="function"><span class="comment">//iterator it 与 type x为必选</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator it,const_iterator first,const_iterator last)</span></span></span><br><span class="line"><span class="function"><span class="comment">//向量中迭代器指向元素前插入另一个相同类型向量的[first,last)间的数据</span></span></span><br></pre></td></tr></table></figure><h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator it)</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除向量中迭代器指向元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first,iterator last)</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除向量中[first,last)中元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除向量中最后一个元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//清空向量中所有元素</span></span></span><br></pre></td></tr></table></figure><h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回首元素的引用,由于返回的是引用,因此可以对原数据进行修改</span></span></span><br><span class="line"><span class="function">reference <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回尾元素的引用</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">reference <span class="title">at</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回pos位置元素的引用</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回向量头指针，指向第一个元素</span></span></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回向量尾指针，指向向量最后一个元素的下一个位置</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">reverse_iterator <span class="title">rbegin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//反向迭代器，指向最后一个元素</span></span></span><br><span class="line"><span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//反向迭代器，指向第一个元素之前的位置</span></span></span><br></pre></td></tr></table></figure><h1 id="改"><a href="#改" class="headerlink" title="改"></a>改</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(vector&amp;)</span></span></span><br><span class="line"><span class="function"><span class="comment">//与另一个vector交换数据</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//设置向量中前n个元素的值为x</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(const_iterator first,const_iterator last)</span></span></span><br><span class="line"><span class="function"><span class="comment">//向量中[first,last)中元素设置成当前向量元素</span></span></span><br></pre></td></tr></table></figure><h1 id="判断是否为空"><a href="#判断是否为空" class="headerlink" title="判断是否为空"></a>判断是否为空</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="获取大小"><a href="#获取大小" class="headerlink" title="获取大小"></a>获取大小</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回向量中元素的个数</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回当前向量所能容纳的最大元素值</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回最大可允许的vector元素数量值</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>求01矩阵中k行1最少的索引</title>
      <link href="/%E6%B1%8201%E7%9F%A9%E9%98%B5%E4%B8%ADk%E8%A1%8C1%E6%9C%80%E5%B0%91%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
      <url>/%E6%B1%8201%E7%9F%A9%E9%98%B5%E4%B8%ADk%E8%A1%8C1%E6%9C%80%E5%B0%91%E7%9A%84%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入：m*n的01矩阵；k</p><p>该矩阵中的每一行都是先1后0的有序数组</p><p>返回这个矩阵中值最小的k行的索引（索引按值从小到大排序），当有两行相等时，索引小的优先</p><p>注：m&lt;=100，值指的是1的个数</p><p>链接：<a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/">https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/</a></p><h1 id="暴力求解-自解"><a href="#暴力求解-自解" class="headerlink" title="暴力求解(自解)"></a>暴力求解(自解)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">kWeakestRows</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取值与索引对</span></span><br><span class="line">        <span class="keyword">int</span> ans[mat.<span class="built_in">size</span>()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mat.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            ans[i][<span class="number">1</span>] = i;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mat[<span class="number">0</span>].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    count ++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i][<span class="number">0</span>] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//选择出前k小的值-索引对并存入ans1中</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = ans[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;mat.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[j][<span class="number">0</span>] &lt; min)&#123;</span><br><span class="line">                    min = ans[j][<span class="number">0</span>];</span><br><span class="line">                    flag = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans1.<span class="built_in">push_back</span>(ans[flag][<span class="number">1</span>]);</span><br><span class="line">            ans[flag][<span class="number">0</span>] = <span class="number">101</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>暴力求解分为两步，第一步是得到索引值与索引对，第二部是对值进行排序</p><p>对于第一步，使用二分法查找1的个数代替遍历</p><p>由于数组是先1后0的有序数组，因此找到最后一个1的位置就等于得到了它的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; mat)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = mat.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left != mid)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mat[mid] == <span class="number">1</span>)</span><br><span class="line">                left = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = mid;</span><br><span class="line">            mid = (left+right)/<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对于第二步，使用堆排序的方法可以得到前k个最小值，因为堆排序完成后的值将会出堆</p><p>C++自带堆排序函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">priority_queue <span class="title">q</span><span class="params">(greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;(), move(power))</span></span>;<span class="comment">//power为之前得到的值-索引对构成的向量</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(q.<span class="built_in">top</span>()[<span class="number">1</span>]);</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>双链表求共同尾链</title>
      <link href="/%E5%8F%8C%E9%93%BE%E8%A1%A8%E6%B1%82%E5%85%B1%E5%90%8C%E5%B0%BE%E9%93%BE/"/>
      <url>/%E5%8F%8C%E9%93%BE%E8%A1%A8%E6%B1%82%E5%85%B1%E5%90%8C%E5%B0%BE%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入两个链表，找出它们的第一个公共节点。</p><p><img src="https://raw.githubusercontent.com/wrathgreedx/pics/master/image-20210722125149272.png"></p><p>链接：<a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/</a></p><h1 id="解"><a href="#解" class="headerlink" title="解"></a>解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode *node1 = headA;</span><br><span class="line">        ListNode *node2 = headB;</span><br><span class="line">        <span class="keyword">while</span>(node1 != <span class="literal">nullptr</span> || node2 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node1 == node2) <span class="keyword">break</span>;</span><br><span class="line">            node1 = node1 == <span class="literal">nullptr</span> ? headB : node1-&gt;next;</span><br><span class="line">            node2 = node2 == <span class="literal">nullptr</span> ? headA : node2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实际上题目中输入的链表的公共部分的含义是地址相同</p><p>即遍历两个链表最终指针会移动到相同的地方</p><p><img src="https://raw.githubusercontent.com/wrathgreedx/pics/master/image-20210722131047397.png" alt="image-20210722131047397"></p><p>利用两个同时移动的指针分别遍历两个链表，遍历到链表尾就转到另一个链表的头部继续遍历</p><p>这样就相当于生成了两条长度相同且尾部相同的链表，到两个指针同时指向尾部时就找到了第一个公共点</p><p>如果两个指针同时指向nullptr，那么显然两个指针遍历完了两个新链表，原链表无公共部分</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>今天建立了这个博客，不知道除了我有多少人能看到呢</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
